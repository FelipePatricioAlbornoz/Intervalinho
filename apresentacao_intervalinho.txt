# Apresentação da Lógica do Aplicativo IntervalinhoApresentação do Aplicativo Intervalinho


## Tecnologias Principais
- React Native / Expo
- Expo Location para geolocalização
- AsyncStorage para persistência
- Expo Crypto para segurança
- React Native Maps para visualização

## Visão GeralOlá a todos! Meu nome é [Seu Nome] e hoje apresentarei o aplicativo Intervalinho, um projeto desenvolvido para [descreva brevemente o propósito do app, por exemplo, "gerenciar o acesso a refeitórios escolares" ou "controlar a distribuição de tickets"]. Este aplicativo foi construído com foco em uma experiência de usuário fluida e eficiente, operando de forma autônoma e segura.

O Intervalinho é um aplicativo desenvolvido para gerenciar os intervalos escolares de forma eficiente e segura. Ele permite que os alunos solicitem tickets de intervalo e que os administradores monitorem e validem esses tickets, garantindo um fluxo organizado durante os horários de pausa.

1. Parte Lógica e Estrutura do Aplicativo

## Estrutura do Projeto

O Intervalinho é um aplicativo móvel desenvolvido utilizando **React Native**, o que permite a criação de interfaces de usuário nativas para iOS e Android a partir de uma única base de código JavaScript. A arquitetura do aplicativo é fortemente baseada em **componentes**, um padrão que promove a modularidade e a reutilização de código.

### 1. Autenticação e Usuários

- Sistema de autenticação seguro usando criptografia moderna (expo-crypto)*  **Componentes Reutilizáveis:** A interface é construída a partir de pequenos blocos independentes (como `LocationToggle`, `TicketCard`, `TimerDisplay`), que podem ser combinados para formar telas mais complexas. Isso facilita a manutenção e a escalabilidade do projeto.

- Dois tipos de usuários:*   **Telas Dedicadas:** As diferentes funcionalidades do aplicativo são organizadas em telas específicas (e.g., `LoginScreen`, `HomeScreen`, `AdminScreen`), cada uma com sua própria lógica e apresentação.

  * Administradores: podem cadastrar alunos e validar tickets*   **Gerenciamento de Estado Global:** Para lidar com informações que precisam ser acessíveis em várias partes do aplicativo, como os dados do usuário autenticado, utilizamos a **React Context API**. Isso evita a necessidade de "prop drilling" (passar props manualmente por muitos níveis de componentes) e centraliza o estado em um local acessível a todos os componentes que precisam dele. O `AuthContext.js` é um exemplo chave, gerenciando o estado de autenticação e as funções de login/logout.

  * Alunos: podem solicitar e usar tickets

- Senhas armazenadas de forma segura com salt e hash2. "Backend" (Serviços e Lógica de Negócio)

- Persistência de dados usando AsyncStorage

É importante notar que o Intervalinho opera como um aplicativo **offline-first**, o que significa que ele não depende de um servidor remoto para suas operações básicas. Em vez disso, a lógica de "backend" é implementada localmente no dispositivo do usuário, principalmente através do arquivo `storage.js`. Este arquivo atua como um serviço de dados local, gerenciando:

### 2. Geolocalização

- Verificação da localização do aluno usando expo-location*   **Gerenciamento de Usuários:**

- Configuração de área permitida:    *   **Registro e Autenticação:** Funções como `registerStudent` permitem o cadastro de novos usuários (alunos e administradores), enquanto `signIn` lida com o processo de autenticação.

  * Coordenadas da escola configuráveis *   **Segurança de Senhas:** As senhas não são armazenadas em texto simples. Utilizamos **hashing (SHA256)** e **salting** (adicionar um valor aleatório único a cada senha antes do hash) através da biblioteca `expo-crypto`. Isso garante que, mesmo que os dados sejam acessados, as senhas originais permaneçam protegidas. A função `verifyPassword` compara a senha fornecida com o hash armazenado para autenticação.

  * Raio de distância permitido (150 metros)    *   **Busca e Migração:** Funções para buscar usuários por matrícula (`findUserByMatricula`) e para migrar senhas antigas para o formato seguro com hash e salt (`migrateUsersToHashed`) também estão presentes.

- Modo de teste para simulação de localização*   **Gerenciamento de Tickets:** O sistema controla a distribuição e o uso de tickets de acesso em uma base diária. Funções como `grantTicketForToday` (conceder ticket) e `markTicketUsed` (marcar ticket como usado) são essenciais para essa funcionalidade. Também é possível listar os tickets do dia (`listTodayTickets`) e acessar o histórico completo (`getTicketsHistory`).

- Atualização em tempo real da posição*   **Redefinição de Dados:** Para fins de manutenção ou redefinição, o aplicativo oferece funções para limpar tickets do dia atual (`resetTodayTickets`) ou todos os dados armazenados (`resetAllData`).



### 3. Gestão de Tickets3. Persistência de Dados

- Sistema de janelas de tempo para intervalos

- Regras de negócio para tickets:A persistência dos dados no Intervalinho é realizada utilizando o **AsyncStorage** do React Native. O AsyncStorage é um sistema de armazenamento de chave-valor assíncrono e persistente, ideal para guardar pequenas quantidades de dados localmente no dispositivo do usuário.

  * Um ticket por aluno por dia

  * Validação temporal (horários específicos)*   **Mecanismo de Armazenamento:** O `storage.js` abstrai a interação direta com o AsyncStorage através de funções como `read`, `write` e `remove`.

  * Validação espacial (dentro da área da escola)    *   `read(key)`: Recupera dados, que são armazenados como strings JSON e convertidos de volta para objetos JavaScript.

  * Status do ticket: disponível ou usado    *   `write(key, value)`: Salva dados, serializando objetos JavaScript para strings JSON antes do armazenamento.

- Histórico de tickets por data    *   `remove(key)`: Exclui dados específicos.

*   **Dados Armazenados:** O AsyncStorage é utilizado para persistir informações cruciais, como:

### 4. Contextos e Estado Global    *   Dados de usuários (incluindo hashes de senha e salts).

- AuthContext: gerencia estado de autenticação    *   Estado de autenticação do usuário.

- TicketsContext: gerencia estado dos tickets    *   Registros de tickets de acesso, organizados por data.

- SettingsContext: gerencia configurações do app

- StudentsContext: gerencia lista de alunosEssa abordagem garante que o aplicativo possa funcionar sem conexão à internet, mantendo a integridade e a disponibilidade dos dados essenciais.



### 5. Serviços Principais4. Métodos de Programação e Padrões de Design Aplicados



#### Storage Service (storage.js)Além da arquitetura baseada em componentes e do gerenciamento de estado, o projeto Intervalinho incorpora outros métodos e padrões importantes:

- Gerenciamento de dados persistentes

- Funções principais:*   **Programação Assíncrona (`async/await`):** Para garantir que a interface do usuário permaneça responsiva, todas as operações de I/O (entrada/saída), como a leitura e escrita no AsyncStorage, são tratadas de forma assíncrona usando `async/await`. Isso torna o código mais limpo e fácil de entender.

  * Gestão de usuários (registro, autenticação)*   **Modularização e Separação de Responsabilidades:** O código é cuidadosamente organizado em diretórios lógicos (`components`, `screens`, `services`, `context`, `constants`), onde cada um tem uma função bem definida. Isso melhora a organização, facilita a localização de funcionalidades e promove a colaboração entre desenvolvedores.

  * Gestão de tickets (criar, validar, listar)*   **Segurança de Dados:** Como mencionado, o uso de hashing e salting para senhas é uma prática de segurança fundamental, protegendo as informações sensíveis dos usuários.

  * Operações de leitura/escrita seguras*   **Navegação (React Navigation):** O aplicativo utiliza uma biblioteca de navegação robusta (provavelmente React Navigation) para gerenciar as transições entre as diferentes telas e a pilha de navegação, proporcionando uma experiência de usuário consistente.

  * Migração e seed de dados

#### Location Service (location.js)
- Serviço de geolocalização
- Funções principais:
  * Verificação de permissões
  * Cálculo de distância
  * Mock de localização para testes

#### Time Service (time.js)
- Gerenciamento de janelas de tempo
- Funções principais:
  * Validação de horários
  * Cálculo de intervalos
  * Verificação de disponibilidade

### 6. Testes
- Testes unitários para serviços críticos
- Testes de integração para fluxos principais
- Mocks para serviços externos (localização, storage)

## Fluxos Principais

### Fluxo do Aluno:
1. Login com matrícula e senha
2. Verificação de elegibilidade para ticket
3. Solicitação de ticket (se dentro da janela de tempo)
4. Uso do ticket (com validação de localização)

### Fluxo do Administrador:
1. Login como admin
2. Acesso ao painel administrativo
3. Cadastro de novos alunos
4. Monitoramento de tickets em tempo real
5. Visualização do histórico de tickets
6. Configuração de parâmetros do sistema

## Segurança e Validações

### Segurança:
- Senhas criptografadas com salt único
- Tokens de autenticação seguros
- Validação de dados em todas as operações
- Proteção contra uso indevido de tickets

### Validações:
- Verificação de matrícula única
- Validação de dados de cadastro
- Checagem de permissões por role
- Validação temporal e espacial para tickets
